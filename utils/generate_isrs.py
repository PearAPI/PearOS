
# False => no error code
# True => error code
predefined_vectors = {
    0: False, # divide by zero
    1: False,
    2: False,
    3: False,
    4: False,
    5: False,
    6: False,
    7: False,
    8: True,
    9: False,
    10: True,
    11: True,
    12: True,
    13: True,
    14: True,
    15: False,
    16: False,
    17: True,
    18: False,
    19: False,
    20: False,
    21: True
}

CODE_SEGMENT = "i686_GDT_CODE_SEGMENT"
GATE_FLAGS = "IDT_FLAG_RING0 | IDT_FLAG_GATE_32BIT_INT"

def generate_isrs_asm():
    file = open("isr.asm", "w")

    file.write(";\n; This file is generated by utils/generate_isrs.py\n")
    file.write("; This is a Template file for the ISR handlers\n;\n")

    for i in range(256):
        if i in predefined_vectors:
            if(predefined_vectors[i]):
                file.write(f"ISR_ERROR {i}\n")
            else:
                file.write(f"ISR_NOERROR {i}\n")
        else:
            file.write(f"ISR_NOERROR {i}\n")

def generate_isrs_c():
    file = open("isr.c", "w")

    file.write("// This file is generated by utils/generate_isrs.py\n\n")
    file.write("#include <stdio.h>\n")
    file.write("#include <core/ISR.h>\n")
    file.write("#include <core/GDT.h>\n")
    file.write("#include <core/IDT.h>\n")
    file.write("\n")

    for i in range(256):
        file.write(f"void __attribute__((cdecl)) i686_ISR{i}();\n")
    
    file.write("\n")
    file.write("void i686_ISR_Initialize() {\n")

    # print all the gate declarations
    for i in range(256):
        file.write(f"    i686_IDT_SetGate({i}, i686_ISR{i}, {CODE_SEGMENT}, {GATE_FLAGS});\n")

    file.write("}\n")

if __name__ == "__main__":
    generate_isrs_asm()
    generate_isrs_c()
    print("Done!")
